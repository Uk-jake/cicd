# 워크플로우 이름 정의
name: spring-app

# on : 해당 플로우가 언제 실행되는지 정의
# main branch로 push할 때, main branch로 request할 때
on:
  # main 브랜치로 push할 때 트리거
  push:
    branches: [ "main" ]
  # main 브랜치로 pull request할 때 트리거
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  build-docker-image:
    #ubuntu 환경에서 수행
    runs-on: ubuntu-latest

    steps:
      #소스 코드 가져오기
      - uses: actions/checkout@v3

      #JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Java Build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # AWS Login
      - name: AWS ECR Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264293778:role/github_ECR
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2


      # DockerHub 로그인 단계
      - name: Login to DockerHub
        uses: docker/login-action@v1  # DockerHub 로그인 액션 사용
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}  # GitHub Secrets에 저장된 DockerHub 사용자 이름 사용
          password: ${{secrets.DOCKERHUB_TOKEN}}  # GitHub Secrets에 저장된 DockerHub 비밀번호(토큰) 사용

      # Docker 이미지 빌드 및 DockerHub로 푸시
      - name: build and release to DockerHub
        env:
          NAME: ${{secrets.DOCKERHUB_USERNAME}}  # GitHub Secret 에서 가져온 DockerHub 사용자 이름 설정
          REPO: ${{secrets.DOCKERHUB_REPO}}  # Docker 이미지의 이름(리포지토리) 설정
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:latest
          docker push $NAME/$REPO:latest
