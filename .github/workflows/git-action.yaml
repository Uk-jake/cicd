# 워크플로우 이름 정의
name: spring-app

# on : 해당 플로우가 언제 실행되는지 정의
# main branch로 push할 때, main branch로 request할 때
on:
  # main 브랜치로 push할 때 트리거
  push:
    branches: [ "main" ]
  # main 브랜치로 pull request할 때 트리거
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

# 전역 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: cicd

#  ECS_SERVICE: itstudyservice2
#  ECS_CLUSTER: deploytest
#  ECS_TASK_DEFINITION: ./task-definition.json
#  CONTAINER_NAME: itstudy1


jobs:
  build-docker-image:
    #ubuntu 환경에서 수행
    runs-on: ubuntu-latest

    steps:
      #소스 코드 가져오기
      - uses: actions/checkout@v3

      #JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Java Build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # AWS Login
      - name: AWS ECR Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::058264293778:role/github_ECR
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      #ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a


#        #이미지를 빌드하고 ECR에 push
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT




