# 워크플로우 이름 정의
name: spring-app

# 워크플로우 트리거 설정
# on : 해당 플로우가 언제 실행되는지 정의
# main 브랜치로 push할 때와 main 브랜치로 pull request할 때 실행
on:
  # main 브랜치로 push할 때 트리거
  push:
    branches: [ "main" ]
  # main 브랜치로 pull request할 때 트리거
  pull_request:
    branches: [ "main" ]

# 필요한 권한 설정
permissions:
  id-token: write  # ID 토큰에 쓰기 권한을 부여 (AWS 역할 사용을 위해 필요)
  contents: read   # 코드 저장소의 내용을 읽을 권한 부여

# 전역 환경 변수 설정 (워크플로우 전체에서 사용할 환경 변수)
env:
  AWS_REGION: ap-northeast-2  # AWS 리전 설정
  ECR_REPOSITORY: cicd        # Amazon ECR 리포지토리 이름

#  ECS 관련 설정은 주석 처리됨
#  ECS_SERVICE: itstudyservice2
#  ECS_CLUSTER: deploytest
#  ECS_TASK_DEFINITION: ./task-definition.json
#  CONTAINER_NAME: itstudy1

jobs:
  # Docker 이미지를 빌드하고 푸시하는 작업 정의
  build-docker-image:
    # 작업을 수행할 환경 설정 (ubuntu 최신 버전 사용)
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 가져오기
      - uses: actions/checkout@v3  # 현재 리포지토리의 코드를 가져옴

      # JDK 설치 단계
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # JDK 설정을 위한 액션 사용
        with:
          java-version: '17'        # 사용할 Java 버전 (JDK 17)
          distribution: 'temurin'   # 사용할 JDK 배포판 (Temurin)

      # Java Build 단계 (Gradle 사용)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1  # Gradle 빌드를 위한 액션 사용
        with:
          arguments: clean bootJar  # Gradle을 사용하여 프로젝트 클린 후 bootJar 생성

      # AWS 자격 증명 설정 (IAM 역할 사용)
      - name: AWS ECR Credential
        uses: aws-actions/configure-aws-credentials@v4  # AWS 자격 증명 설정 액션 사용 (올바른 버전은 v2)
        with:
          role-to-assume: arn:aws:iam::058264293778:role/github_ECR  # 사용할 IAM 역할 ARN
          role-session-name: sampleSessionName  # 세션 이름 설정
          aws-region: ap-northeast-2  # AWS 리전 설정 (환경 변수와 동일)

      # Amazon ECR에 로그인 단계
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a  # Amazon ECR 로그인 액션 사용 (올바른 버전은 v1)

      # Docker 이미지를 빌드하고 Amazon ECR에 Push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # 로그인한 ECR 레지스트리 주소 가져오기
          IMAGE_TAG: ${{ github.sha }}  # 현재 커밋의 SHA를 이미지 태그로 사용
        run: |
          # Docker 이미지를 빌드합니다.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # 빌드한 이미지를 Amazon ECR에 푸시합니다.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # 빌드된 이미지의 정보(GitHub 환경 변수에 설정)
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          # 이미지 정보를 출력 (로그 용도)
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

